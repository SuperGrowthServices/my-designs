import React, { useState } from 'react';
import { VendorPart } from '@/types/vendor';
import { QuoteCondition, QuoteWarranty, MyQuote } from '@/types/orders';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Upload } from 'lucide-react';
import { X } from 'lucide-react';

interface CreateQuoteModalProps {
  part: VendorPart | null;
  orderId: string;
  onClose: () => void;
  onAddQuote: (orderId: string, partId: string, newQuote: MyQuote) => void;
}

export const CreateQuoteModal: React.FC<CreateQuoteModalProps> = ({
  part,
  orderId,
  onClose,
  onAddQuote
}) => {
  if (!part) return null;

  const [price, setPrice] = useState('');
  const [condition, setCondition] = useState<QuoteCondition>('Used - Good');
  const [warranty, setWarranty] = useState<QuoteWarranty>('7 Days');
  const [notes, setNotes] = useState('');
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);

  const handleSubmit = async () => {
    try {
      let imageUrl = undefined;

      // Handle image upload if present
      if (imageFile) {
        const formData = new FormData();
        formData.append('file', imageFile);
        
        // TODO: Replace with your actual image upload endpoint
        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const data = await response.json();
          imageUrl = data.url;
        }
      }

      const newQuote: MyQuote = {
        id: `mq-${Math.random()}`, // This should be generated by the backend
        price: parseFloat(price) || 0,
        condition,
        warranty,
        notes,
        imageUrl: imageUrl || imagePreview,
        isAccepted: false,
      };

      onAddQuote(orderId, part.id, newQuote);
      onClose();
    } catch (error) {
      console.error('Error submitting quote:', error);
      // Add error handling here - maybe show a toast
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      setImageFile(file);
      setImagePreview(URL.createObjectURL(file));
    }
  };

  return (
    <div 
      className="fixed inset-0 z-[200] flex items-center justify-center" 
      onClick={onClose}
    >
      <div className="fixed inset-0 bg-black/70" />
      <div 
        className="relative z-[201] bg-white rounded-xl shadow-2xl w-full max-w-md m-4 p-6"
        onClick={e => e.stopPropagation()}
      >
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold">Create Quote for: <span className="text-blue-600">{part.partName}</span></h3>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-5 w-5" />
          </Button>
        </div>

        <div className="space-y-4">
          {part.quoteRange && (
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg text-center">
              <span className="text-sm text-blue-800">Quote Range: </span>
              <span className="font-bold text-blue-800">
                AED {part.quoteRange.min} - {part.quoteRange.max}
              </span>
            </div>
          )}

          <div className="space-y-2">
            <label className="text-sm font-medium">Price (AED)</label>
            <Input
              type="number"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              placeholder="Enter price"
              className="focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Condition</label>
            <Select 
              defaultValue={condition}
              onValueChange={(value) => setCondition(value as QuoteCondition)}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select condition" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="New">New</SelectItem>
                <SelectItem value="Used - Excellent">Used - Excellent</SelectItem>
                <SelectItem value="Used - Good">Used - Good</SelectItem>
                <SelectItem value="Used - Fair">Used - Fair</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Warranty</label>
            <Select 
              defaultValue={warranty}
              onValueChange={(value) => setWarranty(value as QuoteWarranty)}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select warranty" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="No Warranty">No Warranty</SelectItem>
                <SelectItem value="3 Days">3 Days</SelectItem>
                <SelectItem value="7 Days">7 Days</SelectItem>
                <SelectItem value="14 Days">14 Days</SelectItem>
                <SelectItem value="30 Days">30 Days</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Notes (Optional)</label>
            <Textarea
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add any additional notes..."
              className="focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Image (Optional)</label>
            <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div className="space-y-1 text-center">
                {imagePreview ? (
                  <img src={imagePreview} alt="Preview" className="mx-auto h-24 w-auto rounded-md object-cover" />
                ) : (
                  <Upload className="mx-auto h-12 w-12 text-gray-400" />
                )}
                <div className="flex text-sm text-gray-600">
                  <label className="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500">
                    <span>Upload a file</span>
                    <input
                      type="file"
                      className="sr-only"
                      accept="image/*"
                      onChange={handleImageUpload}
                    />
                  </label>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <Button variant="outline" onClick={onClose} className="flex-1">
            Cancel
          </Button>
          <Button onClick={handleSubmit} className="flex-1 bg-blue-600 hover:bg-blue-700">
            Submit Quote
          </Button>
        </div>
      </div>
    </div>
  );
};